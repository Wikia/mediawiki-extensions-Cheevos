<?php
/**
 * StatProgress
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cheevos API
 *
 * API for Hydra's achievements, quests, and user reporting.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * StatProgress Class Doc Comment
 *
 * @category    Class */
 // @description Represents a statistic for a user on a specific site; or, if site_id is 0, a statistic for a user across all sites.  When streak_type is not none, this stat is used for streak achievements.  Not all stats will have streak progress, and not all streak periods will be available--streak progress is only tracked when a corresponding streak achievement exists.
/**
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class StatProgress implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'StatProgress';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'stat' => '\Swagger\Client\Model\Stat',
        'user_id' => 'int',
        'site_id' => 'int',
        'streak_type' => '\Swagger\Client\Model\StreakType',
        'count' => 'int',
        'last_incremented' => 'int'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'stat' => 'stat',
        'user_id' => 'user_id',
        'site_id' => 'site_id',
        'streak_type' => 'streak_type',
        'count' => 'count',
        'last_incremented' => 'last_incremented'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'stat' => 'setStat',
        'user_id' => 'setUserId',
        'site_id' => 'setSiteId',
        'streak_type' => 'setStreakType',
        'count' => 'setCount',
        'last_incremented' => 'setLastIncremented'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'stat' => 'getStat',
        'user_id' => 'getUserId',
        'site_id' => 'getSiteId',
        'streak_type' => 'getStreakType',
        'count' => 'getCount',
        'last_incremented' => 'getLastIncremented'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['stat'] = isset($data['stat']) ? $data['stat'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['site_id'] = isset($data['site_id']) ? $data['site_id'] : null;
        $this->container['streak_type'] = isset($data['streak_type']) ? $data['streak_type'] : null;
        $this->container['count'] = isset($data['count']) ? $data['count'] : null;
        $this->container['last_incremented'] = isset($data['last_incremented']) ? $data['last_incremented'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets stat
     * @return \Swagger\Client\Model\Stat
     */
    public function getStat()
    {
        return $this->container['stat'];
    }

    /**
     * Sets stat
     * @param \Swagger\Client\Model\Stat $stat
     * @return $this
     */
    public function setStat($stat)
    {
        $this->container['stat'] = $stat;

        return $this;
    }

    /**
     * Gets user_id
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     * @param int $user_id
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets site_id
     * @return int
     */
    public function getSiteId()
    {
        return $this->container['site_id'];
    }

    /**
     * Sets site_id
     * @param int $site_id
     * @return $this
     */
    public function setSiteId($site_id)
    {
        $this->container['site_id'] = $site_id;

        return $this;
    }

    /**
     * Gets streak_type
     * @return \Swagger\Client\Model\StreakType
     */
    public function getStreakType()
    {
        return $this->container['streak_type'];
    }

    /**
     * Sets streak_type
     * @param \Swagger\Client\Model\StreakType $streak_type
     * @return $this
     */
    public function setStreakType($streak_type)
    {
        $this->container['streak_type'] = $streak_type;

        return $this;
    }

    /**
     * Gets count
     * @return int
     */
    public function getCount()
    {
        return $this->container['count'];
    }

    /**
     * Sets count
     * @param int $count
     * @return $this
     */
    public function setCount($count)
    {
        $this->container['count'] = $count;

        return $this;
    }

    /**
     * Gets last_incremented
     * @return int
     */
    public function getLastIncremented()
    {
        return $this->container['last_incremented'];
    }

    /**
     * Sets last_incremented
     * @param int $last_incremented Unix time in seconds when this progress was last updated
     * @return $this
     */
    public function setLastIncremented($last_incremented)
    {
        $this->container['last_incremented'] = $last_incremented;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


