<?php
/**
 * AchievementProgress
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cheevos API
 *
 * API for Hydra's achievements, quests, and user reporting.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * AchievementProgress Class Doc Comment
 *
 * @category    Class */
 // @description Respresents a user&#39;s progress toward an achievement.  Can be manually awarded, which will cause the achievement progress to ignore automatic mechanisms of awarding through stats.
/**
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class AchievementProgress implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'AchievementProgress';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'achievement_id' => 'int',
        'user_id' => 'int',
        'site_id' => 'int',
        'site_key' => 'string',
        'earned' => 'bool',
        'manual_award' => 'bool',
        'awarded_at' => 'int',
        'notified' => 'bool'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'achievement_id' => 'achievement_id',
        'user_id' => 'user_id',
        'site_id' => 'site_id',
        'site_key' => 'site_key',
        'earned' => 'earned',
        'manual_award' => 'manual_award',
        'awarded_at' => 'awarded_at',
        'notified' => 'notified'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'achievement_id' => 'setAchievementId',
        'user_id' => 'setUserId',
        'site_id' => 'setSiteId',
        'site_key' => 'setSiteKey',
        'earned' => 'setEarned',
        'manual_award' => 'setManualAward',
        'awarded_at' => 'setAwardedAt',
        'notified' => 'setNotified'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'achievement_id' => 'getAchievementId',
        'user_id' => 'getUserId',
        'site_id' => 'getSiteId',
        'site_key' => 'getSiteKey',
        'earned' => 'getEarned',
        'manual_award' => 'getManualAward',
        'awarded_at' => 'getAwardedAt',
        'notified' => 'getNotified'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['achievement_id'] = isset($data['achievement_id']) ? $data['achievement_id'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['site_id'] = isset($data['site_id']) ? $data['site_id'] : null;
        $this->container['site_key'] = isset($data['site_key']) ? $data['site_key'] : null;
        $this->container['earned'] = isset($data['earned']) ? $data['earned'] : null;
        $this->container['manual_award'] = isset($data['manual_award']) ? $data['manual_award'] : null;
        $this->container['awarded_at'] = isset($data['awarded_at']) ? $data['awarded_at'] : null;
        $this->container['notified'] = isset($data['notified']) ? $data['notified'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets achievement_id
     * @return int
     */
    public function getAchievementId()
    {
        return $this->container['achievement_id'];
    }

    /**
     * Sets achievement_id
     * @param int $achievement_id
     * @return $this
     */
    public function setAchievementId($achievement_id)
    {
        $this->container['achievement_id'] = $achievement_id;

        return $this;
    }

    /**
     * Gets user_id
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     * @param int $user_id
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets site_id
     * @return int
     */
    public function getSiteId()
    {
        return $this->container['site_id'];
    }

    /**
     * Sets site_id
     * @param int $site_id
     * @return $this
     */
    public function setSiteId($site_id)
    {
        $this->container['site_id'] = $site_id;

        return $this;
    }

    /**
     * Gets site_key
     * @return string
     */
    public function getSiteKey()
    {
        return $this->container['site_key'];
    }

    /**
     * Sets site_key
     * @param string $site_key
     * @return $this
     */
    public function setSiteKey($site_key)
    {
        $this->container['site_key'] = $site_key;

        return $this;
    }

    /**
     * Gets earned
     * @return bool
     */
    public function getEarned()
    {
        return $this->container['earned'];
    }

    /**
     * Sets earned
     * @param bool $earned
     * @return $this
     */
    public function setEarned($earned)
    {
        $this->container['earned'] = $earned;

        return $this;
    }

    /**
     * Gets manual_award
     * @return bool
     */
    public function getManualAward()
    {
        return $this->container['manual_award'];
    }

    /**
     * Sets manual_award
     * @param bool $manual_award
     * @return $this
     */
    public function setManualAward($manual_award)
    {
        $this->container['manual_award'] = $manual_award;

        return $this;
    }

    /**
     * Gets awarded_at
     * @return int
     */
    public function getAwardedAt()
    {
        return $this->container['awarded_at'];
    }

    /**
     * Sets awarded_at
     * @param int $awarded_at Unix time in seconds when this progress was awarded, if earned is true.
     * @return $this
     */
    public function setAwardedAt($awarded_at)
    {
        $this->container['awarded_at'] = $awarded_at;

        return $this;
    }

    /**
     * Gets notified
     * @return bool
     */
    public function getNotified()
    {
        return $this->container['notified'];
    }

    /**
     * Sets notified
     * @param bool $notified
     * @return $this
     */
    public function setNotified($notified)
    {
        $this->container['notified'] = $notified;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


